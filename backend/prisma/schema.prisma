generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model champions {
  id                  Int                   @id @unique(map: "id_UNIQUE") @default(autoincrement())
  name                String?               @unique(map: "name_UNIQUE") @db.VarChar(45)
  championKey         String?               @unique(map: "key_UNIQUE") @db.VarChar(45)
  title               String?               @db.VarChar(60)
  resource            String?               @default("Mana") @db.VarChar(20)
  skinCount           Int?                  @db.TinyInt
  position            String?               @db.VarChar(255)
  gender              Int?                  @db.TinyInt
  rangeType           String?               @db.VarChar(30)
  region              String?               @db.VarChar(255)
  released            String?               @db.VarChar(5)
  spriteIds           String?               @db.VarChar(60)
  genre               String?               @db.VarChar(255)
  damageType          String?               @db.VarChar(45)
  UserSolvedChampions UserSolvedChampions[]
  UserSolvedSplashes  UserSolvedSplashes[]
  abilities           abilities[]
}

model items {
  id              Int               @id @default(autoincrement())
  itemId          Int               @unique(map: "itemId_UNIQUE")
  name            String            @unique(map: "name_UNIQUE") @db.VarChar(60)
  UserSolvedItems UserSolvedItems[]
}

model old_items {
  id                 Int                  @id @unique(map: "id_UNIQUE") @default(autoincrement())
  name               String               @unique(map: "name_UNIQUE") @db.VarChar(50)
  old_item_key       String?              @unique(map: "key_UNIQUE") @db.VarChar(255)
  UserSolvedOldItems UserSolvedOldItems[]
}

model statistics {
  id              Int      @id @default(autoincrement())
  date            DateTime @default(now()) @db.DateTime(0)
  dau             Int      @default(0)
  requests        Int      @default(0)
  mostActiveUsers String   @db.VarChar(60)
  players         Int      @default(0)
  users           Int      @default(0)
}

model users {
  id                    Int                   @id @unique(map: "id_UNIQUE") @default(autoincrement())
  nickname              String                @default("Anonymous") @db.VarChar(30)
  token                 String                @db.VarChar(64)
  currentChampion       Int
  timestamp             String                @db.VarChar(10)
  prestige              Int                   @default(0)
  score                 Int                   @default(0)
  currentSplashChampion Int?
  currentSplashId       Int?
  country               String?               @db.VarChar(5)
  currentItemId         Int?
  currentOldItemId      Int?
  solvedChampions       UserSolvedChampions[]
  solvedItems           UserSolvedItems[]
  solvedOldItems        UserSolvedOldItems[]
  solvedSplashes        UserSolvedSplashes[]
}

model UserSolvedChampions {
  userId     Int
  championId Int
  champion   champions @relation(fields: [championId], references: [id], onDelete: Cascade)
  user       users     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, championId])
  @@index([championId], map: "UserSolvedChampions_championId_fkey")
}

model UserSolvedItems {
  userId Int
  itemId Int
  item   items @relation(fields: [itemId], references: [itemId], onDelete: Cascade)
  user   users @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, itemId])
  @@index([itemId])
}

model UserSolvedOldItems {
  userId    Int
  oldItemId Int
  oldItem   old_items @relation(fields: [oldItemId], references: [id], onDelete: Cascade)
  user      users     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, oldItemId])
  @@index([oldItemId], map: "UserSolvedOldItems_oldItemId_fkey")
}

model UserSolvedSplashes {
  userId     Int
  championId Int
  champions  champions @relation(fields: [championId], references: [id], onDelete: Cascade, map: "UserSolvedSplashes_splashId_fkey")
  user       users     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, championId])
  @@index([championId], map: "UserSolvedSplashes_splashId_fkey")
}

model lol_patches {
  id        Int      @id @default(autoincrement())
  version   String   @unique @db.VarChar(20)
  checkedAt DateTime @default(now()) @db.Timestamp(0)
}

enum AbilityKey {
  P
  Q
  W
  E
  R
}

model abilities {
  id         Int        @id @default(autoincrement())
  championId Int
  name       String
  key        AbilityKey
  champion   champions  @relation(fields: [championId], references: [id], onDelete: Cascade)

  @@unique([championId, key])
}
